// Generated by gencpp from file OpenFace/intent_msg.msg
// DO NOT EDIT!


#ifndef OPENFACE_MESSAGE_INTENT_MSG_H
#define OPENFACE_MESSAGE_INTENT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace OpenFace
{
template <class ContainerAllocator>
struct intent_msg_
{
  typedef intent_msg_<ContainerAllocator> Type;

  intent_msg_()
    : pose_tra_x(0.0)
    , pose_tra_y(0.0)
    , pose_tra_z(0.0)
    , looking(0.0)
    , gesture(0.0)
    , result_interact(false)
    , box_h(0.0)
    , box_w(0.0)
    , box_x(0.0)
    , box_y(0.0)
    , id_model(0)  {
    }
  intent_msg_(const ContainerAllocator& _alloc)
    : pose_tra_x(0.0)
    , pose_tra_y(0.0)
    , pose_tra_z(0.0)
    , looking(0.0)
    , gesture(0.0)
    , result_interact(false)
    , box_h(0.0)
    , box_w(0.0)
    , box_x(0.0)
    , box_y(0.0)
    , id_model(0)  {
  (void)_alloc;
    }



   typedef double _pose_tra_x_type;
  _pose_tra_x_type pose_tra_x;

   typedef double _pose_tra_y_type;
  _pose_tra_y_type pose_tra_y;

   typedef double _pose_tra_z_type;
  _pose_tra_z_type pose_tra_z;

   typedef double _looking_type;
  _looking_type looking;

   typedef double _gesture_type;
  _gesture_type gesture;

   typedef uint8_t _result_interact_type;
  _result_interact_type result_interact;

   typedef double _box_h_type;
  _box_h_type box_h;

   typedef double _box_w_type;
  _box_w_type box_w;

   typedef double _box_x_type;
  _box_x_type box_x;

   typedef double _box_y_type;
  _box_y_type box_y;

   typedef int64_t _id_model_type;
  _id_model_type id_model;




  typedef boost::shared_ptr< ::OpenFace::intent_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::OpenFace::intent_msg_<ContainerAllocator> const> ConstPtr;

}; // struct intent_msg_

typedef ::OpenFace::intent_msg_<std::allocator<void> > intent_msg;

typedef boost::shared_ptr< ::OpenFace::intent_msg > intent_msgPtr;
typedef boost::shared_ptr< ::OpenFace::intent_msg const> intent_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::OpenFace::intent_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::OpenFace::intent_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace OpenFace

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'OpenFace': ['/home/jorgematos/image_transport_ws/src/OpenFace/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::OpenFace::intent_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::OpenFace::intent_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::OpenFace::intent_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::OpenFace::intent_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::OpenFace::intent_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::OpenFace::intent_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::OpenFace::intent_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02d901b2511f76856ba477ad5479b375";
  }

  static const char* value(const ::OpenFace::intent_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02d901b2511f7685ULL;
  static const uint64_t static_value2 = 0x6ba477ad5479b375ULL;
};

template<class ContainerAllocator>
struct DataType< ::OpenFace::intent_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "OpenFace/intent_msg";
  }

  static const char* value(const ::OpenFace::intent_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::OpenFace::intent_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pose_tra_x\n\
float64 pose_tra_y\n\
float64 pose_tra_z\n\
float64 looking\n\
float64 gesture\n\
bool result_interact\n\
float64 box_h\n\
float64 box_w\n\
float64 box_x\n\
float64 box_y\n\
int64 id_model\n\
\n\
";
  }

  static const char* value(const ::OpenFace::intent_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::OpenFace::intent_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_tra_x);
      stream.next(m.pose_tra_y);
      stream.next(m.pose_tra_z);
      stream.next(m.looking);
      stream.next(m.gesture);
      stream.next(m.result_interact);
      stream.next(m.box_h);
      stream.next(m.box_w);
      stream.next(m.box_x);
      stream.next(m.box_y);
      stream.next(m.id_model);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct intent_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::OpenFace::intent_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::OpenFace::intent_msg_<ContainerAllocator>& v)
  {
    s << indent << "pose_tra_x: ";
    Printer<double>::stream(s, indent + "  ", v.pose_tra_x);
    s << indent << "pose_tra_y: ";
    Printer<double>::stream(s, indent + "  ", v.pose_tra_y);
    s << indent << "pose_tra_z: ";
    Printer<double>::stream(s, indent + "  ", v.pose_tra_z);
    s << indent << "looking: ";
    Printer<double>::stream(s, indent + "  ", v.looking);
    s << indent << "gesture: ";
    Printer<double>::stream(s, indent + "  ", v.gesture);
    s << indent << "result_interact: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result_interact);
    s << indent << "box_h: ";
    Printer<double>::stream(s, indent + "  ", v.box_h);
    s << indent << "box_w: ";
    Printer<double>::stream(s, indent + "  ", v.box_w);
    s << indent << "box_x: ";
    Printer<double>::stream(s, indent + "  ", v.box_x);
    s << indent << "box_y: ";
    Printer<double>::stream(s, indent + "  ", v.box_y);
    s << indent << "id_model: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id_model);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENFACE_MESSAGE_INTENT_MSG_H
