// Generated by gencpp from file OpenFace/intent_msg_all.msg
// DO NOT EDIT!


#ifndef OPENFACE_MESSAGE_INTENT_MSG_ALL_H
#define OPENFACE_MESSAGE_INTENT_MSG_ALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <OpenFace/intent_msg.h>

namespace OpenFace
{
template <class ContainerAllocator>
struct intent_msg_all_
{
  typedef intent_msg_all_<ContainerAllocator> Type;

  intent_msg_all_()
    : intent_person()
    , total_models(0)  {
    }
  intent_msg_all_(const ContainerAllocator& _alloc)
    : intent_person(_alloc)
    , total_models(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::OpenFace::intent_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::OpenFace::intent_msg_<ContainerAllocator> >::other >  _intent_person_type;
  _intent_person_type intent_person;

   typedef int64_t _total_models_type;
  _total_models_type total_models;




  typedef boost::shared_ptr< ::OpenFace::intent_msg_all_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::OpenFace::intent_msg_all_<ContainerAllocator> const> ConstPtr;

}; // struct intent_msg_all_

typedef ::OpenFace::intent_msg_all_<std::allocator<void> > intent_msg_all;

typedef boost::shared_ptr< ::OpenFace::intent_msg_all > intent_msg_allPtr;
typedef boost::shared_ptr< ::OpenFace::intent_msg_all const> intent_msg_allConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::OpenFace::intent_msg_all_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::OpenFace::intent_msg_all_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace OpenFace

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'OpenFace': ['/home/jorgematos/image_transport_ws/src/OpenFace/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::OpenFace::intent_msg_all_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::OpenFace::intent_msg_all_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::OpenFace::intent_msg_all_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::OpenFace::intent_msg_all_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::OpenFace::intent_msg_all_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::OpenFace::intent_msg_all_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::OpenFace::intent_msg_all_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c261ae83801d8c2fb6cb2ae1d4bc8c81";
  }

  static const char* value(const ::OpenFace::intent_msg_all_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc261ae83801d8c2fULL;
  static const uint64_t static_value2 = 0xb6cb2ae1d4bc8c81ULL;
};

template<class ContainerAllocator>
struct DataType< ::OpenFace::intent_msg_all_<ContainerAllocator> >
{
  static const char* value()
  {
    return "OpenFace/intent_msg_all";
  }

  static const char* value(const ::OpenFace::intent_msg_all_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::OpenFace::intent_msg_all_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intent_msg[]  intent_person\n\
int64 total_models\n\
\n\
================================================================================\n\
MSG: OpenFace/intent_msg\n\
float64 pose_tra_x\n\
float64 pose_tra_y\n\
float64 pose_tra_z\n\
float64 looking\n\
float64 gesture\n\
bool result_interact\n\
float64 box_h\n\
float64 box_w\n\
float64 box_x\n\
float64 box_y\n\
int64 id_model\n\
\n\
";
  }

  static const char* value(const ::OpenFace::intent_msg_all_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::OpenFace::intent_msg_all_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intent_person);
      stream.next(m.total_models);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct intent_msg_all_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::OpenFace::intent_msg_all_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::OpenFace::intent_msg_all_<ContainerAllocator>& v)
  {
    s << indent << "intent_person[]" << std::endl;
    for (size_t i = 0; i < v.intent_person.size(); ++i)
    {
      s << indent << "  intent_person[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::OpenFace::intent_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.intent_person[i]);
    }
    s << indent << "total_models: ";
    Printer<int64_t>::stream(s, indent + "  ", v.total_models);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENFACE_MESSAGE_INTENT_MSG_ALL_H
