// Generated by gencpp from file k2_client/JointOrientationAndType.msg
// DO NOT EDIT!


#ifndef K2_CLIENT_MESSAGE_JOINTORIENTATIONANDTYPE_H
#define K2_CLIENT_MESSAGE_JOINTORIENTATIONANDTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>

namespace k2_client
{
template <class ContainerAllocator>
struct JointOrientationAndType_
{
  typedef JointOrientationAndType_<ContainerAllocator> Type;

  JointOrientationAndType_()
    : orientation()
    , jointType(0)  {
    }
  JointOrientationAndType_(const ContainerAllocator& _alloc)
    : orientation(_alloc)
    , jointType(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef int32_t _jointType_type;
  _jointType_type jointType;




  typedef boost::shared_ptr< ::k2_client::JointOrientationAndType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::k2_client::JointOrientationAndType_<ContainerAllocator> const> ConstPtr;

}; // struct JointOrientationAndType_

typedef ::k2_client::JointOrientationAndType_<std::allocator<void> > JointOrientationAndType;

typedef boost::shared_ptr< ::k2_client::JointOrientationAndType > JointOrientationAndTypePtr;
typedef boost::shared_ptr< ::k2_client::JointOrientationAndType const> JointOrientationAndTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::k2_client::JointOrientationAndType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::k2_client::JointOrientationAndType_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace k2_client

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'k2_client': ['/home/jorgematos/image_transport_ws/src/k2_client/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::k2_client::JointOrientationAndType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::k2_client::JointOrientationAndType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::k2_client::JointOrientationAndType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::k2_client::JointOrientationAndType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::k2_client::JointOrientationAndType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::k2_client::JointOrientationAndType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::k2_client::JointOrientationAndType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cc8c53731606896e746bc308db6a603";
  }

  static const char* value(const ::k2_client::JointOrientationAndType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cc8c53731606896ULL;
  static const uint64_t static_value2 = 0xe746bc308db6a603ULL;
};

template<class ContainerAllocator>
struct DataType< ::k2_client::JointOrientationAndType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "k2_client/JointOrientationAndType";
  }

  static const char* value(const ::k2_client::JointOrientationAndType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::k2_client::JointOrientationAndType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Quaternion orientation\n\
int32 jointType\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::k2_client::JointOrientationAndType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::k2_client::JointOrientationAndType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orientation);
      stream.next(m.jointType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointOrientationAndType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::k2_client::JointOrientationAndType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::k2_client::JointOrientationAndType_<ContainerAllocator>& v)
  {
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "jointType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.jointType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // K2_CLIENT_MESSAGE_JOINTORIENTATIONANDTYPE_H
