// Generated by gencpp from file k2_client/Body.msg
// DO NOT EDIT!


#ifndef K2_CLIENT_MESSAGE_BODY_H
#define K2_CLIENT_MESSAGE_BODY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <k2_client/Lean.h>
#include <k2_client/JointOrientationAndType.h>
#include <k2_client/JointPositionAndState.h>

namespace k2_client
{
template <class ContainerAllocator>
struct Body_
{
  typedef Body_<ContainerAllocator> Type;

  Body_()
    : header()
    , leanTrackingState(0)
    , lean()
    , isRestricted(false)
    , trackingId(0)
    , clippedEdges(0)
    , handRightConfidence(0.0)
    , handRightState(0)
    , handLeftConfidence(0.0)
    , handLeftState(0)
    , jointOrientations()
    , jointPositions()  {
    }
  Body_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , leanTrackingState(0)
    , lean(_alloc)
    , isRestricted(false)
    , trackingId(0)
    , clippedEdges(0)
    , handRightConfidence(0.0)
    , handRightState(0)
    , handLeftConfidence(0.0)
    , handLeftState(0)
    , jointOrientations(_alloc)
    , jointPositions(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _leanTrackingState_type;
  _leanTrackingState_type leanTrackingState;

   typedef  ::k2_client::Lean_<ContainerAllocator>  _lean_type;
  _lean_type lean;

   typedef uint8_t _isRestricted_type;
  _isRestricted_type isRestricted;

   typedef uint64_t _trackingId_type;
  _trackingId_type trackingId;

   typedef int32_t _clippedEdges_type;
  _clippedEdges_type clippedEdges;

   typedef float _handRightConfidence_type;
  _handRightConfidence_type handRightConfidence;

   typedef int32_t _handRightState_type;
  _handRightState_type handRightState;

   typedef float _handLeftConfidence_type;
  _handLeftConfidence_type handLeftConfidence;

   typedef int32_t _handLeftState_type;
  _handLeftState_type handLeftState;

   typedef std::vector< ::k2_client::JointOrientationAndType_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::k2_client::JointOrientationAndType_<ContainerAllocator> >::other >  _jointOrientations_type;
  _jointOrientations_type jointOrientations;

   typedef std::vector< ::k2_client::JointPositionAndState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::k2_client::JointPositionAndState_<ContainerAllocator> >::other >  _jointPositions_type;
  _jointPositions_type jointPositions;




  typedef boost::shared_ptr< ::k2_client::Body_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::k2_client::Body_<ContainerAllocator> const> ConstPtr;

}; // struct Body_

typedef ::k2_client::Body_<std::allocator<void> > Body;

typedef boost::shared_ptr< ::k2_client::Body > BodyPtr;
typedef boost::shared_ptr< ::k2_client::Body const> BodyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::k2_client::Body_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::k2_client::Body_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace k2_client

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'k2_client': ['/home/jorgematos/image_transport_ws/src/k2_client/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::k2_client::Body_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::k2_client::Body_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::k2_client::Body_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::k2_client::Body_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::k2_client::Body_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::k2_client::Body_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::k2_client::Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ebb194398ed7e8f009bd213a1f9c6fc";
  }

  static const char* value(const ::k2_client::Body_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ebb194398ed7e8fULL;
  static const uint64_t static_value2 = 0x009bd213a1f9c6fcULL;
};

template<class ContainerAllocator>
struct DataType< ::k2_client::Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "k2_client/Body";
  }

  static const char* value(const ::k2_client::Body_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::k2_client::Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 leanTrackingState\n\
Lean lean\n\
bool isRestricted\n\
uint64 trackingId\n\
int32 clippedEdges\n\
float32 handRightConfidence\n\
int32 handRightState\n\
float32 handLeftConfidence\n\
int32 handLeftState\n\
JointOrientationAndType[] jointOrientations\n\
JointPositionAndState[] jointPositions\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: k2_client/Lean\n\
float64 leanX\n\
float64 leanY\n\
================================================================================\n\
MSG: k2_client/JointOrientationAndType\n\
geometry_msgs/Quaternion orientation\n\
int32 jointType\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: k2_client/JointPositionAndState\n\
bool trackingState\n\
geometry_msgs/Point position\n\
int32 jointType\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::k2_client::Body_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::k2_client::Body_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.leanTrackingState);
      stream.next(m.lean);
      stream.next(m.isRestricted);
      stream.next(m.trackingId);
      stream.next(m.clippedEdges);
      stream.next(m.handRightConfidence);
      stream.next(m.handRightState);
      stream.next(m.handLeftConfidence);
      stream.next(m.handLeftState);
      stream.next(m.jointOrientations);
      stream.next(m.jointPositions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Body_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::k2_client::Body_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::k2_client::Body_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "leanTrackingState: ";
    Printer<int32_t>::stream(s, indent + "  ", v.leanTrackingState);
    s << indent << "lean: ";
    s << std::endl;
    Printer< ::k2_client::Lean_<ContainerAllocator> >::stream(s, indent + "  ", v.lean);
    s << indent << "isRestricted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isRestricted);
    s << indent << "trackingId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.trackingId);
    s << indent << "clippedEdges: ";
    Printer<int32_t>::stream(s, indent + "  ", v.clippedEdges);
    s << indent << "handRightConfidence: ";
    Printer<float>::stream(s, indent + "  ", v.handRightConfidence);
    s << indent << "handRightState: ";
    Printer<int32_t>::stream(s, indent + "  ", v.handRightState);
    s << indent << "handLeftConfidence: ";
    Printer<float>::stream(s, indent + "  ", v.handLeftConfidence);
    s << indent << "handLeftState: ";
    Printer<int32_t>::stream(s, indent + "  ", v.handLeftState);
    s << indent << "jointOrientations[]" << std::endl;
    for (size_t i = 0; i < v.jointOrientations.size(); ++i)
    {
      s << indent << "  jointOrientations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::k2_client::JointOrientationAndType_<ContainerAllocator> >::stream(s, indent + "    ", v.jointOrientations[i]);
    }
    s << indent << "jointPositions[]" << std::endl;
    for (size_t i = 0; i < v.jointPositions.size(); ++i)
    {
      s << indent << "  jointPositions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::k2_client::JointPositionAndState_<ContainerAllocator> >::stream(s, indent + "    ", v.jointPositions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // K2_CLIENT_MESSAGE_BODY_H
