# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from OpenFace/intent_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class intent_msg(genpy.Message):
  _md5sum = "02d901b2511f76856ba477ad5479b375"
  _type = "OpenFace/intent_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 pose_tra_x
float64 pose_tra_y
float64 pose_tra_z
float64 looking
float64 gesture
bool result_interact
float64 box_h
float64 box_w
float64 box_x
float64 box_y
int64 id_model

"""
  __slots__ = ['pose_tra_x','pose_tra_y','pose_tra_z','looking','gesture','result_interact','box_h','box_w','box_x','box_y','id_model']
  _slot_types = ['float64','float64','float64','float64','float64','bool','float64','float64','float64','float64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose_tra_x,pose_tra_y,pose_tra_z,looking,gesture,result_interact,box_h,box_w,box_x,box_y,id_model

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(intent_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pose_tra_x is None:
        self.pose_tra_x = 0.
      if self.pose_tra_y is None:
        self.pose_tra_y = 0.
      if self.pose_tra_z is None:
        self.pose_tra_z = 0.
      if self.looking is None:
        self.looking = 0.
      if self.gesture is None:
        self.gesture = 0.
      if self.result_interact is None:
        self.result_interact = False
      if self.box_h is None:
        self.box_h = 0.
      if self.box_w is None:
        self.box_w = 0.
      if self.box_x is None:
        self.box_x = 0.
      if self.box_y is None:
        self.box_y = 0.
      if self.id_model is None:
        self.id_model = 0
    else:
      self.pose_tra_x = 0.
      self.pose_tra_y = 0.
      self.pose_tra_z = 0.
      self.looking = 0.
      self.gesture = 0.
      self.result_interact = False
      self.box_h = 0.
      self.box_w = 0.
      self.box_x = 0.
      self.box_y = 0.
      self.id_model = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5dB4dq.pack(_x.pose_tra_x, _x.pose_tra_y, _x.pose_tra_z, _x.looking, _x.gesture, _x.result_interact, _x.box_h, _x.box_w, _x.box_x, _x.box_y, _x.id_model))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 81
      (_x.pose_tra_x, _x.pose_tra_y, _x.pose_tra_z, _x.looking, _x.gesture, _x.result_interact, _x.box_h, _x.box_w, _x.box_x, _x.box_y, _x.id_model,) = _struct_5dB4dq.unpack(str[start:end])
      self.result_interact = bool(self.result_interact)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5dB4dq.pack(_x.pose_tra_x, _x.pose_tra_y, _x.pose_tra_z, _x.looking, _x.gesture, _x.result_interact, _x.box_h, _x.box_w, _x.box_x, _x.box_y, _x.id_model))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 81
      (_x.pose_tra_x, _x.pose_tra_y, _x.pose_tra_z, _x.looking, _x.gesture, _x.result_interact, _x.box_h, _x.box_w, _x.box_x, _x.box_y, _x.id_model,) = _struct_5dB4dq.unpack(str[start:end])
      self.result_interact = bool(self.result_interact)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5dB4dq = struct.Struct("<5dB4dq")
