# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from OpenFace/pose_message_all.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import OpenFace.msg

class pose_message_all(genpy.Message):
  _md5sum = "51e4daddc2b2462433d7aa5eabd0c8a1"
  _type = "OpenFace/pose_message_all"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """My_message[]  person
int64 total_models


================================================================================
MSG: OpenFace/My_message
float64 pose_tra_x
float64 pose_tra_y
float64 pose_tra_z
float64 pose_rot_x
float64 pose_rot_y
float64 pose_rot_z
float64 gaze_0_rot_x
float64 gaze_0_rot_y
float64 gaze_0_rot_z
float64 gaze_1_rot_x
float64 gaze_1_rot_y
float64 gaze_1_rot_z
float64 diff_gaze_x
float64 diff_gaze_y
float64 diff_gaze_z
float64 box_h
float64 box_w
float64 box_x
float64 box_y
int64 id_model

"""
  __slots__ = ['person','total_models']
  _slot_types = ['OpenFace/My_message[]','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       person,total_models

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pose_message_all, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.person is None:
        self.person = []
      if self.total_models is None:
        self.total_models = 0
    else:
      self.person = []
      self.total_models = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.person)
      buff.write(_struct_I.pack(length))
      for val1 in self.person:
        _x = val1
        buff.write(_struct_19dq.pack(_x.pose_tra_x, _x.pose_tra_y, _x.pose_tra_z, _x.pose_rot_x, _x.pose_rot_y, _x.pose_rot_z, _x.gaze_0_rot_x, _x.gaze_0_rot_y, _x.gaze_0_rot_z, _x.gaze_1_rot_x, _x.gaze_1_rot_y, _x.gaze_1_rot_z, _x.diff_gaze_x, _x.diff_gaze_y, _x.diff_gaze_z, _x.box_h, _x.box_w, _x.box_x, _x.box_y, _x.id_model))
      buff.write(_struct_q.pack(self.total_models))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.person is None:
        self.person = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.person = []
      for i in range(0, length):
        val1 = OpenFace.msg.My_message()
        _x = val1
        start = end
        end += 160
        (_x.pose_tra_x, _x.pose_tra_y, _x.pose_tra_z, _x.pose_rot_x, _x.pose_rot_y, _x.pose_rot_z, _x.gaze_0_rot_x, _x.gaze_0_rot_y, _x.gaze_0_rot_z, _x.gaze_1_rot_x, _x.gaze_1_rot_y, _x.gaze_1_rot_z, _x.diff_gaze_x, _x.diff_gaze_y, _x.diff_gaze_z, _x.box_h, _x.box_w, _x.box_x, _x.box_y, _x.id_model,) = _struct_19dq.unpack(str[start:end])
        self.person.append(val1)
      start = end
      end += 8
      (self.total_models,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.person)
      buff.write(_struct_I.pack(length))
      for val1 in self.person:
        _x = val1
        buff.write(_struct_19dq.pack(_x.pose_tra_x, _x.pose_tra_y, _x.pose_tra_z, _x.pose_rot_x, _x.pose_rot_y, _x.pose_rot_z, _x.gaze_0_rot_x, _x.gaze_0_rot_y, _x.gaze_0_rot_z, _x.gaze_1_rot_x, _x.gaze_1_rot_y, _x.gaze_1_rot_z, _x.diff_gaze_x, _x.diff_gaze_y, _x.diff_gaze_z, _x.box_h, _x.box_w, _x.box_x, _x.box_y, _x.id_model))
      buff.write(_struct_q.pack(self.total_models))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.person is None:
        self.person = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.person = []
      for i in range(0, length):
        val1 = OpenFace.msg.My_message()
        _x = val1
        start = end
        end += 160
        (_x.pose_tra_x, _x.pose_tra_y, _x.pose_tra_z, _x.pose_rot_x, _x.pose_rot_y, _x.pose_rot_z, _x.gaze_0_rot_x, _x.gaze_0_rot_y, _x.gaze_0_rot_z, _x.gaze_1_rot_x, _x.gaze_1_rot_y, _x.gaze_1_rot_z, _x.diff_gaze_x, _x.diff_gaze_y, _x.diff_gaze_z, _x.box_h, _x.box_w, _x.box_x, _x.box_y, _x.id_model,) = _struct_19dq.unpack(str[start:end])
        self.person.append(val1)
      start = end
      end += 8
      (self.total_models,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
_struct_19dq = struct.Struct("<19dq")
