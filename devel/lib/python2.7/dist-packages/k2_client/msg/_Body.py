# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from k2_client/Body.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import k2_client.msg
import geometry_msgs.msg
import std_msgs.msg

class Body(genpy.Message):
  _md5sum = "5ebb194398ed7e8f009bd213a1f9c6fc"
  _type = "k2_client/Body"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int32 leanTrackingState
Lean lean
bool isRestricted
uint64 trackingId
int32 clippedEdges
float32 handRightConfidence
int32 handRightState
float32 handLeftConfidence
int32 handLeftState
JointOrientationAndType[] jointOrientations
JointPositionAndState[] jointPositions

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: k2_client/Lean
float64 leanX
float64 leanY
================================================================================
MSG: k2_client/JointOrientationAndType
geometry_msgs/Quaternion orientation
int32 jointType
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: k2_client/JointPositionAndState
bool trackingState
geometry_msgs/Point position
int32 jointType
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','leanTrackingState','lean','isRestricted','trackingId','clippedEdges','handRightConfidence','handRightState','handLeftConfidence','handLeftState','jointOrientations','jointPositions']
  _slot_types = ['std_msgs/Header','int32','k2_client/Lean','bool','uint64','int32','float32','int32','float32','int32','k2_client/JointOrientationAndType[]','k2_client/JointPositionAndState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,leanTrackingState,lean,isRestricted,trackingId,clippedEdges,handRightConfidence,handRightState,handLeftConfidence,handLeftState,jointOrientations,jointPositions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Body, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.leanTrackingState is None:
        self.leanTrackingState = 0
      if self.lean is None:
        self.lean = k2_client.msg.Lean()
      if self.isRestricted is None:
        self.isRestricted = False
      if self.trackingId is None:
        self.trackingId = 0
      if self.clippedEdges is None:
        self.clippedEdges = 0
      if self.handRightConfidence is None:
        self.handRightConfidence = 0.
      if self.handRightState is None:
        self.handRightState = 0
      if self.handLeftConfidence is None:
        self.handLeftConfidence = 0.
      if self.handLeftState is None:
        self.handLeftState = 0
      if self.jointOrientations is None:
        self.jointOrientations = []
      if self.jointPositions is None:
        self.jointPositions = []
    else:
      self.header = std_msgs.msg.Header()
      self.leanTrackingState = 0
      self.lean = k2_client.msg.Lean()
      self.isRestricted = False
      self.trackingId = 0
      self.clippedEdges = 0
      self.handRightConfidence = 0.
      self.handRightState = 0
      self.handLeftConfidence = 0.
      self.handLeftState = 0
      self.jointOrientations = []
      self.jointPositions = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i2dBQififi.pack(_x.leanTrackingState, _x.lean.leanX, _x.lean.leanY, _x.isRestricted, _x.trackingId, _x.clippedEdges, _x.handRightConfidence, _x.handRightState, _x.handLeftConfidence, _x.handLeftState))
      length = len(self.jointOrientations)
      buff.write(_struct_I.pack(length))
      for val1 in self.jointOrientations:
        _v1 = val1.orientation
        _x = _v1
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_i.pack(val1.jointType))
      length = len(self.jointPositions)
      buff.write(_struct_I.pack(length))
      for val1 in self.jointPositions:
        buff.write(_struct_B.pack(val1.trackingState))
        _v2 = val1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_i.pack(val1.jointType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lean is None:
        self.lean = k2_client.msg.Lean()
      if self.jointOrientations is None:
        self.jointOrientations = None
      if self.jointPositions is None:
        self.jointPositions = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.leanTrackingState, _x.lean.leanX, _x.lean.leanY, _x.isRestricted, _x.trackingId, _x.clippedEdges, _x.handRightConfidence, _x.handRightState, _x.handLeftConfidence, _x.handLeftState,) = _struct_i2dBQififi.unpack(str[start:end])
      self.isRestricted = bool(self.isRestricted)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jointOrientations = []
      for i in range(0, length):
        val1 = k2_client.msg.JointOrientationAndType()
        _v3 = val1.orientation
        _x = _v3
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (val1.jointType,) = _struct_i.unpack(str[start:end])
        self.jointOrientations.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jointPositions = []
      for i in range(0, length):
        val1 = k2_client.msg.JointPositionAndState()
        start = end
        end += 1
        (val1.trackingState,) = _struct_B.unpack(str[start:end])
        val1.trackingState = bool(val1.trackingState)
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.jointType,) = _struct_i.unpack(str[start:end])
        self.jointPositions.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i2dBQififi.pack(_x.leanTrackingState, _x.lean.leanX, _x.lean.leanY, _x.isRestricted, _x.trackingId, _x.clippedEdges, _x.handRightConfidence, _x.handRightState, _x.handLeftConfidence, _x.handLeftState))
      length = len(self.jointOrientations)
      buff.write(_struct_I.pack(length))
      for val1 in self.jointOrientations:
        _v5 = val1.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_i.pack(val1.jointType))
      length = len(self.jointPositions)
      buff.write(_struct_I.pack(length))
      for val1 in self.jointPositions:
        buff.write(_struct_B.pack(val1.trackingState))
        _v6 = val1.position
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_i.pack(val1.jointType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lean is None:
        self.lean = k2_client.msg.Lean()
      if self.jointOrientations is None:
        self.jointOrientations = None
      if self.jointPositions is None:
        self.jointPositions = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.leanTrackingState, _x.lean.leanX, _x.lean.leanY, _x.isRestricted, _x.trackingId, _x.clippedEdges, _x.handRightConfidence, _x.handRightState, _x.handLeftConfidence, _x.handLeftState,) = _struct_i2dBQififi.unpack(str[start:end])
      self.isRestricted = bool(self.isRestricted)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jointOrientations = []
      for i in range(0, length):
        val1 = k2_client.msg.JointOrientationAndType()
        _v7 = val1.orientation
        _x = _v7
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (val1.jointType,) = _struct_i.unpack(str[start:end])
        self.jointOrientations.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jointPositions = []
      for i in range(0, length):
        val1 = k2_client.msg.JointPositionAndState()
        start = end
        end += 1
        (val1.trackingState,) = _struct_B.unpack(str[start:end])
        val1.trackingState = bool(val1.trackingState)
        _v8 = val1.position
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.jointType,) = _struct_i.unpack(str[start:end])
        self.jointPositions.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_i = struct.Struct("<i")
_struct_i2dBQififi = struct.Struct("<i2dBQififi")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
