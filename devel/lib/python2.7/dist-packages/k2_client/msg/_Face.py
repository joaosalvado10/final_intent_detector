# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from k2_client/Face.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Face(genpy.Message):
  _md5sum = "ed75d8d4d2181a3c347f809e6978a39c"
  _type = "k2_client/Face"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint64 trackingId
float32 jawOpen
float32 lipPucker
float32 jawSlideRight
float32 lipStretcherRight
float32 lipStretcherLeft
float32 lipCornerPullerLeft
float32 lipCornerPullerRight
float32 lipCornerDepressorLeft
float32 lipCornerDepressorRight
float32 leftCheekPuff
float32 rightCheekPuff
float32 leftEyeClosed
float32 rightEyeClosed
float32 leftEyebrowLowerer
float32 rightEyebrowLowerer
float32 lowerLipDepressorLeft
float32 lowerLipDepressorRight
geometry_msgs/Quaternion faceOrientation
geometry_msgs/Point headPivotPoint

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','trackingId','jawOpen','lipPucker','jawSlideRight','lipStretcherRight','lipStretcherLeft','lipCornerPullerLeft','lipCornerPullerRight','lipCornerDepressorLeft','lipCornerDepressorRight','leftCheekPuff','rightCheekPuff','leftEyeClosed','rightEyeClosed','leftEyebrowLowerer','rightEyebrowLowerer','lowerLipDepressorLeft','lowerLipDepressorRight','faceOrientation','headPivotPoint']
  _slot_types = ['std_msgs/Header','uint64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','geometry_msgs/Quaternion','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,trackingId,jawOpen,lipPucker,jawSlideRight,lipStretcherRight,lipStretcherLeft,lipCornerPullerLeft,lipCornerPullerRight,lipCornerDepressorLeft,lipCornerDepressorRight,leftCheekPuff,rightCheekPuff,leftEyeClosed,rightEyeClosed,leftEyebrowLowerer,rightEyebrowLowerer,lowerLipDepressorLeft,lowerLipDepressorRight,faceOrientation,headPivotPoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Face, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trackingId is None:
        self.trackingId = 0
      if self.jawOpen is None:
        self.jawOpen = 0.
      if self.lipPucker is None:
        self.lipPucker = 0.
      if self.jawSlideRight is None:
        self.jawSlideRight = 0.
      if self.lipStretcherRight is None:
        self.lipStretcherRight = 0.
      if self.lipStretcherLeft is None:
        self.lipStretcherLeft = 0.
      if self.lipCornerPullerLeft is None:
        self.lipCornerPullerLeft = 0.
      if self.lipCornerPullerRight is None:
        self.lipCornerPullerRight = 0.
      if self.lipCornerDepressorLeft is None:
        self.lipCornerDepressorLeft = 0.
      if self.lipCornerDepressorRight is None:
        self.lipCornerDepressorRight = 0.
      if self.leftCheekPuff is None:
        self.leftCheekPuff = 0.
      if self.rightCheekPuff is None:
        self.rightCheekPuff = 0.
      if self.leftEyeClosed is None:
        self.leftEyeClosed = 0.
      if self.rightEyeClosed is None:
        self.rightEyeClosed = 0.
      if self.leftEyebrowLowerer is None:
        self.leftEyebrowLowerer = 0.
      if self.rightEyebrowLowerer is None:
        self.rightEyebrowLowerer = 0.
      if self.lowerLipDepressorLeft is None:
        self.lowerLipDepressorLeft = 0.
      if self.lowerLipDepressorRight is None:
        self.lowerLipDepressorRight = 0.
      if self.faceOrientation is None:
        self.faceOrientation = geometry_msgs.msg.Quaternion()
      if self.headPivotPoint is None:
        self.headPivotPoint = geometry_msgs.msg.Point()
    else:
      self.header = std_msgs.msg.Header()
      self.trackingId = 0
      self.jawOpen = 0.
      self.lipPucker = 0.
      self.jawSlideRight = 0.
      self.lipStretcherRight = 0.
      self.lipStretcherLeft = 0.
      self.lipCornerPullerLeft = 0.
      self.lipCornerPullerRight = 0.
      self.lipCornerDepressorLeft = 0.
      self.lipCornerDepressorRight = 0.
      self.leftCheekPuff = 0.
      self.rightCheekPuff = 0.
      self.leftEyeClosed = 0.
      self.rightEyeClosed = 0.
      self.leftEyebrowLowerer = 0.
      self.rightEyebrowLowerer = 0.
      self.lowerLipDepressorLeft = 0.
      self.lowerLipDepressorRight = 0.
      self.faceOrientation = geometry_msgs.msg.Quaternion()
      self.headPivotPoint = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Q17f7d.pack(_x.trackingId, _x.jawOpen, _x.lipPucker, _x.jawSlideRight, _x.lipStretcherRight, _x.lipStretcherLeft, _x.lipCornerPullerLeft, _x.lipCornerPullerRight, _x.lipCornerDepressorLeft, _x.lipCornerDepressorRight, _x.leftCheekPuff, _x.rightCheekPuff, _x.leftEyeClosed, _x.rightEyeClosed, _x.leftEyebrowLowerer, _x.rightEyebrowLowerer, _x.lowerLipDepressorLeft, _x.lowerLipDepressorRight, _x.faceOrientation.x, _x.faceOrientation.y, _x.faceOrientation.z, _x.faceOrientation.w, _x.headPivotPoint.x, _x.headPivotPoint.y, _x.headPivotPoint.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.faceOrientation is None:
        self.faceOrientation = geometry_msgs.msg.Quaternion()
      if self.headPivotPoint is None:
        self.headPivotPoint = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 132
      (_x.trackingId, _x.jawOpen, _x.lipPucker, _x.jawSlideRight, _x.lipStretcherRight, _x.lipStretcherLeft, _x.lipCornerPullerLeft, _x.lipCornerPullerRight, _x.lipCornerDepressorLeft, _x.lipCornerDepressorRight, _x.leftCheekPuff, _x.rightCheekPuff, _x.leftEyeClosed, _x.rightEyeClosed, _x.leftEyebrowLowerer, _x.rightEyebrowLowerer, _x.lowerLipDepressorLeft, _x.lowerLipDepressorRight, _x.faceOrientation.x, _x.faceOrientation.y, _x.faceOrientation.z, _x.faceOrientation.w, _x.headPivotPoint.x, _x.headPivotPoint.y, _x.headPivotPoint.z,) = _struct_Q17f7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Q17f7d.pack(_x.trackingId, _x.jawOpen, _x.lipPucker, _x.jawSlideRight, _x.lipStretcherRight, _x.lipStretcherLeft, _x.lipCornerPullerLeft, _x.lipCornerPullerRight, _x.lipCornerDepressorLeft, _x.lipCornerDepressorRight, _x.leftCheekPuff, _x.rightCheekPuff, _x.leftEyeClosed, _x.rightEyeClosed, _x.leftEyebrowLowerer, _x.rightEyebrowLowerer, _x.lowerLipDepressorLeft, _x.lowerLipDepressorRight, _x.faceOrientation.x, _x.faceOrientation.y, _x.faceOrientation.z, _x.faceOrientation.w, _x.headPivotPoint.x, _x.headPivotPoint.y, _x.headPivotPoint.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.faceOrientation is None:
        self.faceOrientation = geometry_msgs.msg.Quaternion()
      if self.headPivotPoint is None:
        self.headPivotPoint = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 132
      (_x.trackingId, _x.jawOpen, _x.lipPucker, _x.jawSlideRight, _x.lipStretcherRight, _x.lipStretcherLeft, _x.lipCornerPullerLeft, _x.lipCornerPullerRight, _x.lipCornerDepressorLeft, _x.lipCornerDepressorRight, _x.leftCheekPuff, _x.rightCheekPuff, _x.leftEyeClosed, _x.rightEyeClosed, _x.leftEyebrowLowerer, _x.rightEyebrowLowerer, _x.lowerLipDepressorLeft, _x.lowerLipDepressorRight, _x.faceOrientation.x, _x.faceOrientation.y, _x.faceOrientation.z, _x.faceOrientation.w, _x.headPivotPoint.x, _x.headPivotPoint.y, _x.headPivotPoint.z,) = _struct_Q17f7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_Q17f7d = struct.Struct("<Q17f7d")
